good_fun <- function( x ){ -x^7-2.3*x^6-x^5-3*x^4+12/17*x^3-1/9*x^2+1/9*x * sign( x^3 ) }
# animate particles
swarm_drainer( lambda_coef_var, -20, 20, n_particles = 100, tol = 0.0001, max_iter = 250 ) -> rs
df <- rs[["parts"]]
df <- as.data.frame(na.omit(df))
df <- dplyr::mutate(df, index = seq_len(nrow(df)))
df <- tidyr::pivot_longer( df, cols = - tidyselect::last_col())
df <- dplyr::rename(df, "position" = "value")
df2 <- rs[["scores"]]
df2 <- as.data.frame(na.omit(df2))
df2 <- dplyr::mutate(df2, index = seq_len(nrow(df2)))
df2 <- tidyr::pivot_longer( df2, cols = - tidyselect::last_col())
df2 <- dplyr::rename(df2, "score" = "value")
df <- dplyr::left_join( df, df2, by = c("index","name") )
anim <- ggplot(df, aes(x = position, y = score, color = name)) +
geom_point() +
transition_states(index, transition_length = 2, state_length = 1) +
enter_fade() +
exit_fade()
animate(anim)
1:5 %*% 1:5
1:5
(1:5)
(1:5)^2
sum((1:5)^2)
tseries:::summary.arma
matrix( NA, 10, 7 )
matrix( NA, 10, 7 ) -> x
matrix( 1:70, 10, 7 ) -> x
x
70/10 * 3
70/10 * 3
70/10 * 4
70/11 * 4
70/10 * 4
(70/10) * 4
(70/10) + 10
((70/10)  * 3) + 10
Rcpp::sourceCpp("src/debug.cpp")
a <- rnorm(50)
test_mat( a, 10, 5 )
matrix(a, 10, 5)
50/10
50/10
)>()
0:9
10:19
20:29
j * nrow
matrix(a, 10, 5)
10 * 0
10 * 1
10 * 2
Rcpp::sourceCpp("src/debug.cpp")
test_mat( a, 10, 5 )
matrix(a, 10, 5)
Rcpp::sourceCpp("src/debug.cpp")
matrix(a, 10, 5)
test_mat( a, 10, 5 )
Rcpp::sourceCpp("src/debug.cpp")
Rcpp::sourceCpp("src/debug.cpp")
matrix(a, 10, 5)
b <- rnorm(35)
matrix(b, 5, 7)
test_mat( a, b, 10,5, 7 )
matrix(a, 10, 5)
matrix(a, 10, 5) *
matrix(b, 5, 7)
matrix(a, 10, 5) %*%
matrix(b, 5, 7)
matrix(1:4, 2, 2)
matrix(1:4, 2, 2) %*% matrix(1:4, 2, 2)
test_mat( 1:4, 1:4, 2, 2, 2 )
1:2 * 1:2
1:2 %*% 1:2
1:2 %*% 1:3
1:2 * 1:3
c(1,2) %*% c(1,3)
c(3,4) %*% c(1,3)
Rcpp::sourceCpp("src/debug.cpp")
test_mat( 1:4, 1:4, 2, 2, 2 )
c(3,4) %*% c(1,3)
c(1,3) %*% c(3,4)
matrix(1:4, 2, 2)
c(1,3) %*% c(1,2)
c(1,3) %*% c(2,4)
test_mat( 1:4, 1:4, 2, 2, 2 )
matrix(1:4, 2, 2) %*% matrix(1:4, 2, 2)
matrix(1:4, 2, 2)
c(1,3) %*% c(1,2)
c(1,3) %*% c(3,4)
c(2,4) %*% c(1,2)
c(2,4) %*% c(3,4)
matrix(1:4, 2, 2, byrow = TRUE)
matrix(1:4, 2, 2, byrow = TRUE) %*% matrix(1:4, 2, 2, byrow = TRUE)
A <- matrix(1:4, 2, 2, byrow = TRUE)
A
Rcpp::sourceCpp("src/debug.cpp")
test_mat( 1:4, 1:4, 2, 2, 2 )
c(2,4) %*% c(2,4)
c(2,4) %*% c(3,4)
c(3,4) %*% c(3,4)
Rcpp::sourceCpp("src/debug.cpp")
test_mat( 1:4, 1:4, 2, 2, 2 )
Rcpp::sourceCpp("src/debug.cpp")
test_inn_prod( 1:2, c(1,3) )
test_inn_prod( c(1,3), 1:2 )
test_inn_prod( c(1,2), 1:2 )
1:2 %*% 1:2
1:2 * 1:2
sum(1:2 * 1:2)
A
A %*% A
A %*% t(A)
A %*% A
test_inn_prod( 1:2, 1:2 )
1:2 %*% 1:2
1:2 * 1:2
A * A
`%*%`
?`%*%`
Rcpp::sourceCpp("src/debug.cpp")
test_inn_prod( 1:2, 1:2 )
test_mat( 1:4, 1:4, 2, 2, 2 )
Rcpp::sourceCpp("src/debug.cpp")
test_mat( 1:4, 1:4, 2, 2, 2 )
A %*% A
acf
source("~/.active-rstudio-document")
dumb_acf( lynx )
source("~/.active-rstudio-document")
dumb_acf( lynx )
source("~/.active-rstudio-document")
dumb_acf( lynx )
dumb_acf( c(lynx) )
source("~/.active-rstudio-document")
dumb_acf( c(lynx) )
source("~/.active-rstudio-document")
dumb_acf( c(lynx) )
source("~/.active-rstudio-document")
dumb_acf( c(lynx) )
acf( lynx, 5 )
acf( lynx, 5, plot = FALSE )
source("~/.active-rstudio-document")
dumb_acf( c(lynx) )
source("~/.active-rstudio-document")
dumb_acf( c(lynx) )
source("~/.active-rstudio-document")
dumb_acf( c(lynx) )
source("~/.active-rstudio-document")
dumb_acf( c(lynx) )
source("~/.active-rstudio-document")
dumb_acf( c(lynx) )
dumb_acf( c(lynx), 10 )
acf( lynx, 10, plot = FALSE )
acf( lynx, 10, plot = FALSE )$acf[-1, 1, 1]
decompose
filter
?acf( lynx, 10, plot = FALSE )$acf[-1, 1, 1]
?acf( lynx, 10, plot = FALSE )
log10(100)
10*log10(100)
forecast::naive
forecast:::rwf
source("~/Desktop/fasttbats/R/4_theta.R")
FourTheta(lynx, 10)
forecast::ses
forecast::ets
forecast::ses
source("~/Desktop/fasttbats/R/4_theta.R")
FourTheta(lynx, 10)
source("~/Desktop/fasttbats/R/4_theta.R")
FourTheta(lynx, 10)
plot.ts(lynx)
FourTheta(lynx, 10)$fitted
FourTheta(lynx, 10)$fitted %>% lines(col = "red")
library(magrittr)
FourTheta(lynx, 10)$fitted %>% lines(col = "red")
plot.ts(c( lynx, rep(NA, 10))
)
FourTheta(lynx, 10)$fitted %>% lines(col = "red")
FourTheta(lynx, 10)$fitted %>% c(rep(NA,10)) %>% lines(col = "red")
FourTheta(lynx, 10)
FourTheta(lynx, 10)$mean %>% c( rep(NA, length(lynx)), . ) %>% lines(col = "green")
tsibbledata::vic_elec
tsibbledata::vic_elec$Demand
tsibbledata::vic_elec$Demand %>% plot.ts
tsibbledata::vic_elec$Demand -> y
y[50000:length(y)] -> y
y %>% plot.ts
FourTheta(y, 120)
FourTheta(y, 120)$fitted
FourTheta(y, 120)$fitted %>% lines(col = "red")
FourTheta(y[ (length(y)-120):length(y) ], 120)$fitted %>% lines(col = "red")
y %>% plot.ts
FourTheta(y[ (length(y)-120):length(y) ], 120)$fitted %>% lines(col = "red")
FourTheta(y[ 1:(length(y)-120) ], 120)$fitted %>% lines(col = "red")
FourTheta(y[ 1:(length(y)-120) ], 120)$mean %>% c(rep(NA,length(y)-120), .) %>% lines(col = "green")
FourTheta(y[ 1:(length(y)-120) ], 120)$mean
FourTheta(y[ 1:(length(y)-120) ], 120)
smooth::auto.ces(y)
smooth::auto.ces(y) %>% plot
smooth::auto.ces(y) %>% forecast
smooth::auto.ces(y) %>% forecast::forecast(h = 120)
smooth::auto.ces(y)
?smooth::auto.ces(y)
library(smooth)
smooth::auto.ces(y) %>% forecast(h = 120)
smooth::auto.ces(y) %>% forecast(h = 120) %>% plot
smooth::auto.gum(y) %>% forecast(h = 120) %>% plot
smooth::auto.adam(y) %>% forecast(h = 120) %>% plot
diag(matrix(rnorm(9), 3, 3))
matrix(rnorm(9), 3, 3)-> y
y
diag(y)
?optim()
tseries:::arma
?tseries:::arma
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
make_lags( 1:5 )
source("~/.active-rstudio-document")
make_lags( 1:5 )
make_lags( 1:5, 3 )
source("~/.active-rstudio-document")
make_lags( 1:5, 3 )
source("~/.active-rstudio-document")
make_lags( 1:5, 3 )
source("~/.active-rstudio-document")
make_lags( 1:5, 3 )
make_lags( 1:5, 5 )
make_lags( 1:5, 4 )
source("~/.active-rstudio-document")
na_safe_mult(make_lags(1:5, 2), 3.5, 2)
na_safe_mult(make_lags(1:5, 2), c(3.5, 2))
source("~/.active-rstudio-document")
arima.sim( model = list( ar = c(0.3, 0.5), ma = -0.8 ) )
arima.sim( model = list( ar = c(0.3, 0.5), ma = -0.8 ), n = 200 )
arima.sim( model = list( ar = c(0.3, 0.5), ma = -0.8 ), n = 200 ) -> ar_mod
forecast::auto.arima(ar_mod)
?forecast::auto.arima(ar_mod)
forecast::auto.arima(ar_mod, allowmean = FALSE)
arima.sim( model = list( ar = c(0.3), ma = -0.8 ), n = 200 ) -> ar_mod
forecast::auto.arima(ar_mod, allowmean = FALSE)
arima(ar_mod, allowmean = FALSE)
arima(ar_mod, p = 1, q = 1)
?arima(ar_mod, p = 1, q = 1)
?arima(ar_mod, order = c(1,0,1))
arima(ar_mod, order = c(1,0,1))
arima.sim( model = list( ar = c(0.3), ma = -0.8 ), n = 200 ) -> ar_mod
arima(ar_mod, order = c(1,0,1))
pars <- list( ar = 0.12, ma = -0.73 )
y <- ar_mod
resid_function(pars)
source("~/.active-rstudio-document")
resid_function(pars)
source("~/.active-rstudio-document")
resid_function(pars)
residuals(arima(ar_mod, order = c(1,0,1))) -> rsd
resid_function(pars)
rsd %>% plot.ts
library(magrittr)
rsd %>% plot.ts
resid_function(pars) %>% c %>% lines(col = "red")
resid_function(pars) %>% c %>% hist
rsd %>% hist
source("~/.active-rstudio-document")
silly_arma( ar_mod )
source("~/.active-rstudio-document")
silly_arma( ar_mod )
source("~/.active-rstudio-document")
silly_arma( ar_mod )
source("~/.active-rstudio-document")
silly_arma( ar_mod )
silly_arma( ar_mod )
silly_arma( ar_mod )
silly_arma( ar_mod )
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
silly_arma( ar_mod )
silly_arma( ar_mod )
silly_arma( ar_mod )
silly_arma( ar_mod )
source("~/.active-rstudio-document")
silly_arma( ar_mod )
source("~/.active-rstudio-document")
silly_arma( ar_mod )
source("~/.active-rstudio-document")
arima.sim( model = c(1,0,1), 200 ) -> rs
arima.sim( model = list(1,0,1), 200 ) -> rs
rs
silly_arma( rs )
rs
rs %*% make_lags(rs , 2)
source("~/.active-rstudio-document")
silly_arma( rs )
silly_arma( rs, 3 )
silly_arma( rs, 5 )
silly_arma( rs, 5 )
silly_arma( rs, 3 )
source("~/.active-rstudio-document")
silly_arma( rs, 3 )
source("~/.active-rstudio-document")
silly_arma( rs, 3 )
source("~/.active-rstudio-document")
silly_arma( rs, 3 )
silly_arma( rs, 3 ) %>% hist
silly_arma( rs, 3 ) %>% c() %>% hist
library(magrittr)
silly_arma( rs, 3 ) %>% c() %>% hist
silly_arma( rs, 3 ) %>% c() -> u_res
source("~/.active-rstudio-document")
silly_arma( rs, 3 )
source("~/.active-rstudio-document")
silly_arma( rs, 3 )
source("~/.active-rstudio-document")
silly_arma( rs, 3 )
source("~/.active-rstudio-document")
silly_arma( rs, 3 )
silly_arma( rs, 3 ) -> x_
t(x) %*% x
t(x_) %*% x_
solve(t(x_) %*% x_)
solve(t(x_) %*% x_) %*% x_
solve(t(x_) %*% x_) %*% t(x_)
source("~/.active-rstudio-document")
silly_arma( rs, 3 ) -> x_
silly_arma( rs, 3 )
source("~/.active-rstudio-document")
silly_arma( rs, 3 )
silly_arma( rs, 3 ) %>% length
source("~/.active-rstudio-document")
silly_arma( rs, 3 )
silly_arma( rs, 3 )  %>% nrow
source("~/.active-rstudio-document")
silly_arma( rs, 3 )
source("~/.active-rstudio-document")
silly_arma( rs, 3 )
source("~/.active-rstudio-document")
silly_arma( rs, 3 )
silly_arma( rs, 1, 1 )
source("~/.active-rstudio-document")
silly_arma( rs, 1, 1 )
source("~/.active-rstudio-document")
silly_arma( rs, 1, 1 )
source("~/.active-rstudio-document")
silly_arma( rs, 1, 1 )
source("~/.active-rstudio-document")
silly_arma( rs, 1, 1 )
source("~/.active-rstudio-document")
silly_arma( rs, 1, 1 )
source("~/.active-rstudio-document")
silly_arma( rs, 1, 1 )
source("~/.active-rstudio-document")
silly_arma( rs, 1, 1 )
arima(rs, order = c(1,0,1))
arima.sim( model = list(1,0,1), 200 ) -> rs
arima.sim( model = list(ar = 0.8, ma = -0.3), 200 ) -> rs
arima(rs, order = c(1,0,1))
source("~/.active-rstudio-document")
silly_arma( rs, 1, 1 )
source("~/.active-rstudio-document")
silly_arma( rs, 1, 1 )
Rcpp::sourceCpp("src/tseries_arma.cpp")
Rcpp::sourceCpp("src/tseries_arma.cpp")
source("~/Desktop/fasttbats/R/tseries_arma.R")
arima.sim( model = c(1,0,1), n = 100 )
arima.sim( model = list( ar = c(0.3), i = 0, ma = -0.2), n = 100 )
arima.sim( model = list( ar = c(0.3), i = 0, ma = -0.2), n = 100 ) -> x
x %>% arima(order = c(1,0,1))
library(magrittr)
x %>% arima(order = c(1,0,1))
x %>% arima(order = c(1,0,1), include.mean = FALSE)
source("~/Desktop/fasttbats/R/tseries_arma.R")
x %>% arma()
source("~/Desktop/fasttbats/R/tseries_arma.R")
x %>% arma()
arima.sim( model = list( ar = c(0.3), i = 0, ma = -0.2), n = 100 ) -> x
x %>% arima(order = c(1,0,1), include.mean = FALSE)
x %>% arma()
x - mean(x)
(x - mean(x)) %>% arima(order = c(1,0,1), include.mean = FALSE)
(x -mean(x))%>% arma()
tseries::arma(x - mean(x))
tseries::arma(x - mean(x), include.intercept = FALSE)
tseries::arma(x - mean(x), include.intercept = FALSE)
tseries::arma(x - mean(x), include.intercept = FALSE)
source("~/Desktop/fasttbats/R/tseries_arma.R")
(x -mean(x))%>% arma()
arima.sim( model = list( ar = c(0.5), i = 0, ma = -0.7), n = 100 ) -> x
tseries::arma(x - mean(x), include.intercept = FALSE)
(x - mean(x)) %>% arima(order = c(1,0,1), include.mean = FALSE)
x %>% arima(order = c(1,0,1), include.mean = FALSE)
x[1:80] %>% arima(order = c(1,0,1), include.mean = FALSE)
x[1:80] %>% arima(order = c(1,0,1), include.mean = FALSE) %>% predict(h = 20)
x[1:80] %>% arima(order = c(1,0,1), include.mean = FALSE) %>% predict(h = 20) %>% plot.ts
x[1:80] %>% arima(order = c(1,0,1), include.mean = FALSE) %>% predict(h = 20) %>% plot
x[1:80] %>% arima(order = c(1,0,1), include.mean = FALSE) %>% predict(h = 20) %>% plot()
x[1:80] %>% arima(order = c(1,0,1), include.mean = FALSE) %>% predict(h = 20)
x[1:80] %>% arima(order = c(1,0,1), include.mean = FALSE) %>% predict(n = 20)
x[1:80] %>% arima(order = c(1,0,1), include.mean = FALSE) %>% predict()
stats:::predict.Arima
?stats:::predict.Arima
x[1:80] %>% arima(order = c(1,0,1), include.mean = FALSE) %>% predict(n.ahead = 20)
x[1:80] %>% arima(order = c(1,0,1), include.mean = FALSE) %>% predict(n.ahead = 20) %>% plot.ts
x[1:80] %>% arima(order = c(1,0,1), include.mean = FALSE) %>% predict(n.ahead = 20) %>% .[["pred"]] %>% plot.ts
tseries::arma(x[1:80], include.intercept = FALSE)
tseries::arma(x[1:80], include.intercept = FALSE) %>% predict()
tseries::arma(x[1:80], include.intercept = FALSE) %>% predict(n.ahead = 2)
?tseries:::arma()
arima
Rcpp::sourceCpp("src/new_arima.cpp")
x <- rnorm(10, sd = 3.5)
x
parameter_transform(x)
parameter_transform(x) %>% inv_parameter_transform()
library(magrittr)
parameter_transform(x) %>% inv_parameter_transform()
Rcpp::sourceCpp("src/new_arima.cpp")
parameter_transform(x) %>% inv_parameter_transform()
x
x
parameter_transform(x) %>% inv_parameter_transform()
Rcpp::sourceCpp("src/new_arima.cpp")
Rcpp::sourceCpp("src/new_arima.cpp")
parameter_transform(x) %>% inv_parameter_transform()
x
Rcpp::sourceCpp("src/new_arima.cpp")
parameter_transform(x) %>% inv_parameter_transform()
"%+%" <- function(a, b) .Call(C_TSconv, a, b)
1 %+% c(1, -1)
"%+%" <- function(a, b) .Call(C_TSconv, a, b, PACKAGE = "stats")
1 %+% c(1, -1)
stats:::C_TSconv
?.Call
"%+%" <- function(a, b) .Call("C_TSconv", a, b, PACKAGE = "stats")
1 %+% c(1, -1)
"%+%" <- function(a, b) .Call("C_TSconv", a, b, PACKAGE = "stats.so")
1 %+% c(1, -1)
"%+%" <- function(a, b) .Call("C_TSconv", a, b, PACKAGE = "base")
1 %+% c(1, -1)
stats:::C_TSconv
"%+%" <- function(a, b) .Call(stats:::C_TSconv, a, b)
1 %+% c(1, -1)
c(1, rep.int(0, 7 - 1), -1)
1 %+% c(1, rep.int(0, 7 - 1), -1)
for (i in seq_len(3)) Delta <- Delta %+% c(1, rep.int(0, 14 - 1), -1)
Delta <- 1
for (i in seq_len(3)) Delta <- Delta %+% c(1, rep.int(0, 14 - 1), -1)
Delta
Rcpp::sourceCpp("src/poly_wrap.cpp")
rnorm(4) -> x
polyroot(x)
polyroot_cpp(x)
Rcpp::sourceCpp("src/poly_wrap.cpp")
polyroot_cpp(x)
polyroot_cpp(x)
polyroot(x)
Rcpp::sourceCpp("src/poly_wrap.cpp")
polyroot_cpp(x)
polyroot(x)
Rcpp::sourceCpp("src/poly_wrap.cpp")
polyroot_cpp(x)
Rcpp::sourceCpp("src/poly_wrap.cpp")
polyroot_cpp(x)
polyroot_cpp(x)
polyroot(x)
Rcpp::sourceCpp("src/poly_wrap.cpp")
polyroot_cpp(x)
?Mod()
polyroot(x)
Mod(polyroot(x))
Mod
bench::press( .grid = c(3,5,10,20,30), { x <- rnorm(5); bench::mark( r = polyroot(x), cpp = polyroot_cpp(x), iterations = 50 ) } ) -> rs
bench::press( .grid = data.frame( size = c(3,5,10,20,30)), { x <- rnorm(size); bench::mark( r = polyroot(x), cpp = polyroot_cpp(x), iterations = 50 ) } ) -> rs
bench::press( .grid = data.frame( size = c(3,5,10,20,30)), { x <- rnorm(size); bench::mark( r = polyroot(x), cpp = polyroot_cpp(x), iterations = 50, check = function(a,b){ all.equal(a, b, tol = 2) } ) } ) -> rs
View(rs)
bench::press( .grid = data.frame( size = c(3,5,10,20,30)), { x <- rnorm(size); bench::mark( r = polyroot(x), cpp = polyroot_cpp(x), iterations = 5000, check = function(a,b){ all.equal(a, b, tol = 2) } ) } ) -> rs
bench::press( .grid = data.frame( size = c(3,5,10,20,30)), { x <- rnorm(size); bench::mark( r = polyroot(x), cpp = polyroot_cpp(x), iterations = 5000, check = function(a,b){ all.equal(a, b, tol = 10) } ) } ) -> rs
abs(polyroot(x))
Mod(polyroot(x))
polyroot(x)
-0.213189^2
1.354118^2
1.354118^2 -0.04544955
sqrt(1.354118^2 -0.04544955)
sqrt(1.788186 -0.04544955)
1.354118^2
sqrt(1.833636 -0.04544955)
abs
abs2 <- function( x ){ sqrt( real(x)^2 + complex(x)^2) }
abs2(polyroot(x))
real
?complex()
polyroot(x) -> y
y
y
class(y)
abs2 <- function( x ){ sqrt( Re(x)^2 + Im(x)^2) }
polyroot(x)
abs(polyroot(x))
abs2(polyroot(x))
Rcpp::sourceCpp("src/debug.cpp")
Rcpp::sourceCpp("src/debug.cpp")
abs(polyroot(x))
test_polyroot_abs(x)
Rcpp::sourceCpp("src/debug.cpp")
test_polyroot_abs(x)
Rcpp::sourceCpp("src/debug.cpp")
test_polyroot_abs(x)
Rcpp::sourceCpp("src/debug.cpp")
test_polyroot_abs(x)
