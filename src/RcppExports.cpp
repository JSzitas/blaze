// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lm_cpp
std::vector<double> lm_cpp(std::vector<double>& y, std::vector<std::vector<double>>& xreg, bool use_intercept);
RcppExport SEXP _blazearima_lm_cpp(SEXP ySEXP, SEXP xregSEXP, SEXP use_interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>>& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< bool >::type use_intercept(use_interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_cpp(y, xreg, use_intercept));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_blazearima_lm_cpp", (DL_FUNC) &_blazearima_lm_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_blazearima(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
