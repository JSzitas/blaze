// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// oarima_test
void oarima_test(std::vector<double>& x, const size_t mk, const size_t d);
RcppExport SEXP _blaze_oarima_test(SEXP xSEXP, SEXP mkSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const size_t >::type mk(mkSEXP);
    Rcpp::traits::input_parameter< const size_t >::type d(dSEXP);
    oarima_test(x, mk, d);
    return R_NilValue;
END_RCPP
}
// stl_test
Rcpp::List stl_test(std::vector<double> x, const size_t period, const size_t seasonal);
RcppExport SEXP _blaze_stl_test(SEXP xSEXP, SEXP periodSEXP, SEXP seasonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const size_t >::type period(periodSEXP);
    Rcpp::traits::input_parameter< const size_t >::type seasonal(seasonalSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_test(x, period, seasonal));
    return rcpp_result_gen;
END_RCPP
}
// test_interpol
double test_interpol(std::vector<double> x, const double p);
RcppExport SEXP _blaze_test_interpol(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(test_interpol(x, p));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_blaze_arima();
RcppExport SEXP _rcpp_module_boot_blaze_ar();
RcppExport SEXP _rcpp_module_boot_blaze_auto_ar();
RcppExport SEXP _rcpp_module_boot_blaze_inoise();

static const R_CallMethodDef CallEntries[] = {
    {"_blaze_oarima_test", (DL_FUNC) &_blaze_oarima_test, 3},
    {"_blaze_stl_test", (DL_FUNC) &_blaze_stl_test, 3},
    {"_blaze_test_interpol", (DL_FUNC) &_blaze_test_interpol, 2},
    {"_rcpp_module_boot_blaze_arima", (DL_FUNC) &_rcpp_module_boot_blaze_arima, 0},
    {"_rcpp_module_boot_blaze_ar", (DL_FUNC) &_rcpp_module_boot_blaze_ar, 0},
    {"_rcpp_module_boot_blaze_auto_ar", (DL_FUNC) &_rcpp_module_boot_blaze_auto_ar, 0},
    {"_rcpp_module_boot_blaze_inoise", (DL_FUNC) &_rcpp_module_boot_blaze_inoise, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_blaze(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
